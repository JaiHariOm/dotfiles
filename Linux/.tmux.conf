#sample-conf=/usr/share/doc/tmux/examples/

set -g default-terminal "screen-256color"

#startUP fish-shell
#set-option -g default-shell "/usr/bin/fish"
#set-option -g default-command "reattach-to-user-namespace -l fish"

set-option -g default-shell /bin/bash
set-option -g default-command /bin/bash  # <= .bashrc を引き継ぐために必要

# Allow UTF-8
#set-window-option -g utf8 on
# Disable ESC delay
set-option -s escape-time 0

# ==== Reload config (r)
bind-key r source-file ~/.tmux.conf\; display-message "Reload Config!!"

# prefix
set-option -g prefix C-a
unbind-key C-b
bind-key C-a send-prefix

# split
bind-key | split-window -h
bind-key \ split-window -v

#unbind key
#==========
unbind [
unbind ]

unbind }
unbind {

#move window us cursor
#
#bind -n Right next-window
#bind -n Left previous-window
#bind -n Up copy-mode

#paneの移動
#bind -n S-left select-pane -L
#bind -n S-down select-pane -D
#bind -n S-up select-pane -U
#bind -n S-right select-pane -R

#bind -n C-Up select-pane -U
#bind -n M-Down select-pane -D
#bind -n C-Right select-pane -R
#bind -n M-Left select-pane -L
#bind k select-pane -U
#bind j select-pane -D
#bind h select-pane -L
#bind l select-pane -R

# resize panes like vim
# feel free to change the "1" to however many lines you want to resize by, only
# one at a time can be slow
bind [ resize-pane -L 5
bind ] resize-pane -R 5
bind - resize-pane -D 5
bind + resize-pane -U 5

#new-window
#unbind-key s
#bind-key s command-prompt "new-window -n %1 'ssh -t %1'"


set-option -g base-index 1

#===============================///
#          MouseMode
#===============================///
#https://github.com/NHDaly/tmux-better-mouse-mode
#tmux 2.4では、MouseModeが使えないので上記のpluginの導入を検討するべ#tmux 2.4では、MouseModeが使えないので上記のpluginの導入を検討するべし。
#bind -n WheelUpPane   select-pane -t= \; copy-mode -e \; send-keys -M
#bind -n WheelDownPane select-pane -t= \;                 send-keys -M

# マウスのスクロール時にcopy-modeになってしまうのを防ぐ
#bind -n WheelUpPane if-shell -Ft= '#{mouse_any_flag}' 'send-keys -M' 'if -Ft= \"#{pane_in_mode}\" \"send-keys -M\" \"copy-mode -e\"'
set-option -g mouse on


## ここからステータス行(最下行)の設定 {{{
#====================================

## 既定の属性
# 「xxx-fg」「xxx-bg」は色、「xxx-attr」は属性
# 透明にしたい場合、端末によっては
# status-bgを「default」にすると256色パレット色の表示が部分的におかしくなる?
# 背景色は端末エミュレータの背景色に近いものを設定すると良いかも
#set-option -g status-fg   default
#set-option -g status-bg   colour239
#set-option -g status-attr default

#set-option -g status-left-fg   default
#set-option -g status-left-bg   colour24
#set-option -g status-left-attr default

#set-option -g status-right-fg   colour115
#set-option -g status-right-bg   colour22
#set-option -g status-right-attr bold

## ウィンドウ一覧部における現在非アクティブなウィンドウの項目の表示
#set-window-option -g window-status-fg   white
#set-window-option -g window-status-bg   default
#set-window-option -g window-status-attr default

## ウィンドウ一覧部における現在アクティブなウィンドウの項目の表示
## 端末によっては256色の色を用いると正常に表示されない?
#set-window-option -g window-status-current-fg   white
#set-window-option -g window-status-current-bg   colour125
#set-window-option -g window-status-current-attr bold

## メッセージ/プロンプト
#set-option -g message-fg   colour115
#set-option -g message-bg   colour24
#set-option -g message-attr bright

## スクロールの右上やコピーモード選択範囲のスタイル
#set-window-option -g mode-fg   colour146
# 256色パレットの色を付けると表示が変になる?(reverseすると回避可能?)
#set-window-option -g mode-bg colour62
#}}}

#Temes
#=================
# copying selection vim style
source-file "${HOME}/.tmux-themepack/powerline/block/green.tmuxtheme"

#-------- Copy Mode (Vim Style) {{{
#------------------------------------------------------
# This section of hotkeys mainly work in copy mode and no where else

# vim keys in copy and choose mode
set-window-option -g mode-keys vi

# copying selection vim style
# http://jasonwryan.com/blog/2011/06/07/copy-and-paste-in-tmux/
# https://github.com/myfreeweb/dotfiles/blob/master/tmux.conf
bind-key Escape copy-mode			# enter copy mode; default [
bind-key p paste-buffer				# paste; (default hotkey: ] )
bind-key P choose-buffer 			# tmux clipboard history
bind-key + delete-buffer \; display-message "Deleted current Tmux Clipboard History"

# Send To Tmux Clipboard or System Clipboard
bind-key < run-shell "tmux set-buffer -- \"$(xsel -o -b)\"" \; display-message "Copy To Tmux Clipboard"
bind-key > run-shell 'tmux show-buffer | xsel -i -b' \; display-message "Copy To System Clipboard"

# set the current tmux version (use this variable on if-shell commands)
run-shell "tmux set-environment -g TMUX_VERSION $(tmux -V | cut -c 6-)"

# vim copy mode rebinds for (tmux 2.4+)
# https://shapeshed.com/custom-vim-bindings-in-tmux-2-4/
# https://github.com/tmux/tmux/issues/754#issuecomment-303156000
# https://stackoverflow.com/a/40902312
# Note: rectangle-toggle (aka Visual Block Mode) > hit v then C-v to trigger it
if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.4" | bc)" = 1 ]' \
  'bind-key -T copy-mode-vi v send-keys -X begin-selection; \
  bind-key -T copy-mode-vi V send-keys -X select-line; \
  bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle; \
  bind-key -T choice-mode-vi h send-keys -X tree-collapse; \
  bind-key -T choice-mode-vi l send-keys -X tree-expand; \
  bind-key -T choice-mode-vi H send-keys -X tree-collapse-all; \
  bind-key -T choice-mode-vi L send-keys -X tree-expand-all; \
  bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "xclip -in -selection clipboard"; \
  bind-key -T copy-mode-vi y send-keys -X copy-pipe "xclip -in -selection clipboard"'

# vim copy mode rebinds for (tmux 2.3 or lower)
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.4" | bc)" = 1 ]' \
  'bind-key -t vi-copy v begin-selection; \
  bind-key -t vi-copy V select-line; \
  bind-key -t vi-copy C-v rectangle-toggle; \
  bind-key -t vi-choice h tree-collapse; \
  bind-key -t vi-choice l tree-expand; \
  bind-key -t vi-choice H tree-collapse-all; \
  bind-key -t vi-choice L tree-expand-all; \
  bind-key -t vi-copy MouseDragEnd1Pane copy-pipe "xclip -in -selection clipboard"; \
  bind-key -t vi-copy y copy-pipe "xclip -in -selection clipboard"'

#}}}

#==========================================================///
#                          Misk
#==========================================================///
# clear sclollback buffer
#  useage: Ctrl+l to clear then Ctrl+k to delete sclollback buffer
bind -n C-k clear-history

# history size
set -g history-limit 5000

#maximize / unmaximize panes
bind } new-window -d -n tmux-zoom 'clear && echo TMUX ZOOM && read' \; swap-pane -s tmux-zoom.0 \; select-window -t tmux-zoom
bind { last-window \; swap-pane -s tmux-zoom.0 \; kill-window -t tmux-zoom

# Tmux Zoom (Toggle Maximiz Pan)
bind-key -n M-z run "~/.local/bin/tmux-zoom.sh"

# Run command on idle; screensaver
set -g lock-after-time 300
set -g lock-command "/usr/bin/cmatrix -C blue"

#prefix選択時にstatus-lineに知らせる
#set-option -g status-left '#[fg=cyan,bg=#303030]#{?client_prefix,#[reverse],} #H[#S] #[default]'
#set -g status-right ' #{?client_prefix,#[reverse]<Prefix ON>#[noreverse] ,}"#{=21:pane_title}" | %a %Y-%m-%d %H:%M'
#set -g status-right '#{prefix_highlight} | %a %Y-%m-%d %H:%M'
#set -g status-right "#{tmux_mode_indicator}"

# Urlviewer; grab links from any tmux window/pane and open it with external apps
# # https://wiki.archlinux.org/index.php/Tmux#Browsing_URL.27s
bind-key u capture-pane \; save-buffer /tmp/tmux-buffer \; new-window -n "urlview" '$SHELL -c "urlview < /tmp/tmux-buffer"'

# urlscan as context and url view
bind-key U capture-pane \; save-buffer /tmp/tmux-buffer \; \
new-window -n "urlscan" '$SHELL -c "urlscan -c < /tmp/tmux-buffer"'

# hit Esc then Shift+M to open GUI browser
bind-key y capture-pane \; save-buffer /tmp/tmux-buffer \; \
new-window -n "w3m" '$SHELL -c "w3m < /tmp/tmux-buffer"'

