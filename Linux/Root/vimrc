" {{{ default

" All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
" the call to :runtime you can find below.	If you wish to change any of those
" settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
" will be overwritten everytime an upgrade of the vim packages is performed.
" It is recommended to make changes after sourcing debian.vim since it alters
" the value of the 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim
set nocompatible
" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"if has("autocmd")
"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
if has("autocmd")
  filetype plugin indent on
endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
"set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
"set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden		" Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

"LeaderKey
"let mapleader = "@"
"set mapleader

" auto reload .vimrc
" augroup reload_vimrc
"	  autocmd! 
" augroup END
" }}}

" NeoBundle Scripts===============================================
" {{{
" Note: Skip initialization for vim-tiny or vim-small.
if 0 | endif


if &compatible
  set nocompatible				 " Be iMproved
endif

" Required:
set runtimepath+=/root/.vim/bundle/neobundle.vim/
set runtimepath+=/root/.vim/bundle/vim-easymotion/
set runtimepath+=/root/.vim/bundle/neocomplete.vim/
set runtimepath+=/root/.vim/bundle/neosnippet-snippets/
set runtimepath+=/root/.vim/bundle/neosnippet.vim/
set runtimepath+=/root/.vim/bundle/open-browser.vim/
set runtimepath+=/root/.vim/bundle/previm/
set runtimepath+=/root/.vim/bundle/vim-colorschemes/
set runtimepath+=/root/.vim/bundle/vim-fugitive/
set runtimepath+=/root/.vim/bundle/vim-markdown/
set runtimepath+=/root/.vim/bundle/vim-numbertoggle/
set runtimepath+=/root/.vim/bundle/vimproc/
set runtimepath+=/root/.vim/bundle/vimshell_3787e5/
set runtimepath+=/root/.vim/bundle/yankround.vim/
set runtimepath+=/root/.vim/bundle/ctrlp.vim/

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
"NeoBundleCheck
" }}}
" End NeoBundle Scripts===========================================


" {{{ MarkDownPeviw
augroup PrevimSettings
	 autocmd!
	 autocmd BufNewFile,BufRead *.{md,mdwn,mkd,mkdn,mark*} set filetype=markdow
	 autocmd BufNewFile,BufRead *.{txt,text} set filetype=markdow
augroup END
"setl foldmethod=expr
"let g:vim_markdown_better_folding=1
" }}}

" 設定-etc=========================================================
" {{{
	set encoding=utf-8
	set fileencoding=utf-8
	set fileencodings=utf-8,iso-2022-jp,euc-jp,sjis,cp932
	set fileformats=unix,dos,mac
	set mouse=a														"マウス操作を有効にする
	set number														"行番号の表示
	"set nonumber
	set relativenumber												"相対番号の表示
	set title														"ターミナルタイトル
	set ambiwidth=double											"全角文字の幅を、2に固定
	set tabstop=4													"タブ幅をスペース4
	set noexpandtab													  "tabを半角スペース
	set shiftwidth=4												"自動で生成する tab幅をスペース4
	set softtabstop=0
	set smartindent													"自動でインデント
	set autoindent
	set cindent														"C 言語スタイルのインデントを自動で入れる
	"set expandtab													" タブをスペースに変換する
	set list														"空白文字の可視化
	"set listchars=tab:|,trail:-									"タブを  半スペを - で表示する
	set listchars=tab:»-,trail:-,eol:↲,extends:»,precedes:«,nbsp:%	"可視化した空白文字の表示形式
	set nrformats-=octal											""0"で始まる数値を、8進数として扱わない
	set hidden														"ファイルが未保存でも、別のファイルを開ける
	set history=50													"a
	set virtualedit=block											"文字のないところにカーソル移動できる
	set whichwrap=b,s,h,l,<,>,[,],~									"カーソルの回り込み
	"set backspace=2
	set wildmenu													"コマンドライン補完強化
	set backspace=start,eol,indent									"Backspaceが空白,行末,行頭でも使える
	set wildmenu wildmode=list:full									"コマンドラインモードにおける補完機能を有効
	set nohlsearch													"検索キーワードをハイライトさせない
	"set cursorline													"カーソル行の強調
	set wrapscan													"検索をファイルの先頭へループしない
	set showmatch													"括弧入力時の対応する括弧を表示
	set matchtime=1
	set clipboard=unnamedplus										"クリップボード
	set title														"編集中のファイル名を表示
	set display=lastline
	set hlsearch!													"検索文字のハイライト
	set pastetoggle=<C-E>						"インデントが崩れる場合の対処挿入モードにして「C-E」でトグル
	set foldmethod=marker						"折りたたみの指定{{{ }}}
	set noincsearch													"インクリメンタルサーチしない
	set nobackup													"バックアップをとらない
	"set background=dark
" }}}
" 設定-etc END=====================================================

" Keymap===========================================================
" {{{
" yankround.vim===========================================

nmap p <Plug>(yankround-p)
nmap P <Plug>(yankround-P)
nmap <C-p> <Plug>(yankround-prev)
nmap <C-m> <Plug>(yankround-next)
let g:yankround_max_history = 100
nnoremap <Leader><C-p> :<C-u>Unite yankround<CR>

"ESCでハイライトを消す
nnoremap <ESC><ESC> :noh<CR>
nnoremap Y y$
nnoremap -d dd
nnoremap -c ddO
"nnoremap <F3> :noh<CR>
 "nnoremap <C-m> :<C-u>setlocal relativenumberi!<CR>
 "nnoremap <C-n> :<C-u>setlocal number<CR>

"noremap <silent> <Space>r :<C-u>source $MYVIMRC \| if has('gui_running') \|
"source $MYGVIMRC \| endif <CR>
" Save shortcut - Ctrl-s	セーブファイル
"	imap :write
"	  nmap	:write
" Quit shortcut - Ctrl-x Ctrl-q	 編集の終了
"	  imap :quit
"	  nmap	:quit
" Undo shortcut - Ctrl-z		 アンドゥ
"	  imap :undo
"	  nmap	:undo
" Insert Data		 日付の挿入
"	  imap t =system('LANG=C date')

" command

"command Pbcopy :let @*=@"  "最後にyank or
" 削除した内容をクリップボードに入れる
"command Pbcopy0 :let @*=@0 "最後にyankした内容をクリップボードに入れる

"Test
" }}}
" Keymap-END=======================================================

" etc...
" {{{
" Save fold settings.折りたたみなどの表示設定を保存・読み込む設定
autocmd BufWritePost * if expand('%') != '' && &buftype !~ 'nofile' | mkview | endif
autocmd BufRead * if expand('%') != '' && &buftype !~ 'nofile' | silent loadview | endif
" Don't save options.
set viewoptions-=options

"ノーマルモードでペーストを行うと自動でペーストモードになって，クリップボードの中身を貼り付けてくれる．
"if &term =~ "xterm" 
"	 let &t_ti .= "\e[?2004h" 
"	 let &t_te .=\e[?2004l" 
"	 let &pastetoggle = "\e[201~" 

"	 function XTermPasteBegin(ret)
"		 set paste 
"		 return a:ret 
"	 endfunction 
"	 noremap <special> <expr> <Esc>[200~ XTermPasteBegin("0i") 
"	 inoremap <special> <expr> <Esc>[200~ XTermPasteBegin("") 
"	 cnoremap <special> <Esc>[200~ <nop>
"	 cnoremap <special> <Esc>[201~ <nop> 
"endif

" vモードの置換連続ペースト用
function! Put_text_without_override_register()
  let line_len = strlen(getline('.'))
   execute "normal! `>"
  let col_loc = col('.')
   execute 'normal! gv"_x'
if line_len == col_loc
   execute 'normal! p'
  else 
   execute 'normal! P'
endif
endfunction
xnoremap <silent> p :call Put_text_without_override_register()<CR>

" }}} ========================================================================

" =================================================================
" Boost your productivity with EasyMotion
" =================================================================
" {{{
" Disable default mappings
" If you are true vimmer, you should explicitly map keys by yourself.
" Do not rely on default bidings.
let g:EasyMotion_do_mapping =1

" Or map prefix key at least(Default: <Leader><Leader>)
" map <Leader> <Plug>(easymotion-prefix)

" =======================================
" Find Motions
" =======================================
" Jump to anywhere you want by just `4` or `3` key strokes without thinking!
" `s{char}{char}{target}`
nmap s <Plug>(easymotion-s2)
xmap s <Plug>(easymotion-s2)
omap z <Plug>(easymotion-s2)
" Of course, you can map to any key you want such as `<Space>`
" map <Space>(easymotion-s2)

" Turn on case sensitive feature
let g:EasyMotion_smartcase = 1

" =======================================
" Line Motions
" =======================================
" `JK` Motions: Extend line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
" keep cursor column with `JK` motions
let g:EasyMotion_startofline = 1

" =======================================
" General Configuration
" =======================================

" Show target key with upper case to improve readability
let g:EasyMotion_use_upper = 1
" Jump to first match with enter & space
let g:EasyMotion_enter_jump_first = 1
let g:EasyMotion_space_jump_first = 1

" =======================================
" Search Motions
" =======================================
" Extend search motions with vital-over command line interface
" Incremental highlight of all the matches
" Now, you don't need to repetitively press `n` or `N` with EasyMotion feature
" `<Tab>` & `<S-Tab>` to scroll up/down a page with next match
" :h easymotion-command-line
nmap g/ <Plug>(easymotion-sn)
xmap g/ <Plug>(easymotion-sn)
omap g/ <Plug>(easymotion-tn)

"=========================================
" Lokaltog/vim-easymotions
"=========================================
"
" http://blog.remora.cx/2012/08/vim-easymotion.html
" ホームポジションに近いキーを使う
" let g:EasyMotion_keys='hjklasdfgyuiopqwertnmzxcvbHJKLASDFGYUIOPQWERTNMZXCVB'
" 「;」 + 何かにマッピング
let g:EasyMotion_leader_key="@"
" 1 ストローク選択を優先する
 "let g:EasyMotion_grouping=1
" カラー設定変更
" hi EasyMotionTarget ctermbg=none ctermfg=red
" hi EasyMotionShade  ctermbg=none ctermfg=blue
" }}}
" EasyMotion END===================================================
"
" snippet==========================================================
" {{{
let g:neosnippet#disable_runtime_snippets = {'_' : 1}
"
" Tell Neosnippet about the other snippets
let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'

" Plugin key-mappings.
" " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <C-k>	   <Plug>(neosnippet_expand_or_jump)
smap <C-k>	   <Plug>(neosnippet_expand_or_jump)
xmap <C-k>	   <Plug>(neosnippet_expand_target)

" " SuperTab like snippets behavior.
" " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <C-k>	   <Plug>(neosnippet_expand_or_jump)
" "imap <expr><TAB>
" " \ pumvisible() ? "\<C-n>" :
" " \ neosnippet#expandable_or_jumpable() ?
" " \	 "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" " For conceal markers.
  if has('conceal')
	set conceallevel=2 concealcursor=niv
	endif
" }}}
" snippet-end======================================================


" neocomplete =====================================================
"{{{
"Note: This option must be set in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
"Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
	\ 'default' : '',
	\ 'vimshell' : $HOME.'/.vimshell_hist',
	\ 'scheme' : $HOME.'/.gosh_completions'
		\ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
	let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>	neocomplete#undo_completion()
inoremap <expr><C-l>	neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  "For no inserting <CR> key.
  "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

" AutoComplPop like behavior.
"let g:neocomplete#enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
" }}}
" neocomplete-end==================================================

" calor============================================================
" {{{
"highlight Comment ctermfg=Green
"highlight Constant ctermfg=Red
"highlight Identifier ctermfg=Cyan
"highlight Statement ctermfg=Yellow
"highlight Title ctermfg=Magenta
"highlight Special ctermfg=7
"highlight PreProc ctermfg=Magenta
"highlight Folded guibg=#ffffff guifg=#ccccff
highlight LineNr ctermfg=148
autocmd VimEnter,Colorscheme * highlight SpecialKey cterm=NONE ctermfg=244 ctermbg=NONE
" }}}

" password-storeでの編集操作時にスワップファイルを作らない=========
"{{{
" Prevent various Vim features from keeping the contents of pass(1) password
" files (or any other purely temporary files) in plaintext on the system.
"
" Either append this to the end of your .vimrc, or install it as a plugin with
" a plugin manager like Tim Pope's Pathogen.
"
" Author: Tom Ryder <tom@sanctum.geek.nz>
"

" Don't backup files in temp directories or shm
if exists('&backupskip')
    set backupskip+=/tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*,*/shm/*
endif

" Don't keep swap files in temp directories or shm
if has('autocmd')
    augroup swapskip
        autocmd!
        silent! autocmd BufNewFile,BufReadPre
            \ /tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*,*/shm/*
            \ setlocal noswapfile
    augroup END
endif

" Don't keep undo files in temp directories or shm
if has('persistent_undo') && has('autocmd')
    augroup undoskip
        autocmd!
        silent! autocmd BufWritePre
            \ /tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*,*/shm/*
            \ setlocal noundofile
    augroup END
endif

" Don't keep viminfo for files in temp directories or shm
if has('viminfo')
    if has('autocmd')
        augroup viminfoskip
            autocmd!
            silent! autocmd BufNewFile,BufReadPre
                \ /tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*,*/shm/*
                \ setlocal viminfo=
        augroup END
    endif
endif


" mutt mail==========================================================

au BufRead /tmp/mutt-* set tw=72
"}}}
